{"ast":null,"code":"import _regeneratorRuntime from \"/home/rserrat/Projetos/github-search/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rserrat/Projetos/github-search/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/rserrat/Projetos/github-search/src/pages/Repositories/Repositories.js\";\nimport React, { useEffect, useContext } from 'react';\nimport { urlGithub } from '../../config';\nimport Loading from '../../components/Loading/Loading';\nimport Container from '../../components/Container/Container';\nimport List from '../../components/List/List';\nimport Item from '../../components/List/Item';\nimport { StoreContext, START_RESULT_REPOSITORIES, SUCCESS_RESULT_REPOSITORIES, ERROR_RESULT_REPOSITORIES } from '../../store';\nimport Empty from '../../components/Empty/Empty';\n\nvar Repositories = function Repositories(_ref) {\n  var login = _ref.match.params.login;\n\n  var _useContext = useContext(StoreContext),\n      _useContext$state$rep = _useContext.state.repositories,\n      data = _useContext$state$rep.data,\n      loading = _useContext$state$rep.loading,\n      dispatch = _useContext.dispatch;\n\n  var fetchData =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: START_RESULT_REPOSITORIES\n              });\n              _context.next = 3;\n              return fetch(\"api/users/\".concat(login, \"/repos\"));\n\n            case 3:\n              response = _context.sent;\n\n              if (!response) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              result = _context.sent;\n              dispatch({\n                type: SUCCESS_RESULT_REPOSITORIES,\n                data: result\n              });\n              _context.next = 12;\n              break;\n\n            case 11:\n              dispatch({\n                type: ERROR_RESULT_REPOSITORIES,\n                error: 'Erro de servidor'\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n\n  var renderContent = function renderContent() {\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      });\n    } else if (data && data.length <= 0) {\n      return React.createElement(Empty, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      });\n    } else if (data && data.length > 0) {\n      return React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, data.map(function (item) {\n        return React.createElement(Item, {\n          key: item.name,\n          name: item.name,\n          description: item.description,\n          html_url: item.html_url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        });\n      }));\n    }\n\n    return null;\n  };\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Mostrando reposit\\xF3rios de \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, login)), renderContent());\n};\n\nexport default Repositories;","map":{"version":3,"sources":["/home/rserrat/Projetos/github-search/src/pages/Repositories/Repositories.js"],"names":["React","useEffect","useContext","urlGithub","Loading","Container","List","Item","StoreContext","START_RESULT_REPOSITORIES","SUCCESS_RESULT_REPOSITORIES","ERROR_RESULT_REPOSITORIES","Empty","Repositories","login","match","params","state","repositories","data","loading","dispatch","fetchData","type","fetch","response","json","result","error","renderContent","length","map","item","name","description","html_url"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport { urlGithub } from '../../config';\nimport Loading from '../../components/Loading/Loading';\nimport Container from '../../components/Container/Container';\nimport List from '../../components/List/List';\nimport Item from '../../components/List/Item';\nimport { \n  StoreContext,\n  START_RESULT_REPOSITORIES, \n  SUCCESS_RESULT_REPOSITORIES,\n  ERROR_RESULT_REPOSITORIES \n} from '../../store';\nimport Empty from '../../components/Empty/Empty';\n\nconst Repositories = ({ match: { params: { login } } }) => {\n  const { state: { repositories: { data, loading } }, dispatch } = useContext(StoreContext);\n\n  const fetchData = async () => {\n    dispatch({ type: START_RESULT_REPOSITORIES });\n    const response = await fetch(`api/users/${login}/repos`);\n    if (response) {\n      const result = await response.json();\n      dispatch({ type: SUCCESS_RESULT_REPOSITORIES, data: result });\n    } else {\n      dispatch({ type: ERROR_RESULT_REPOSITORIES, error: 'Erro de servidor' });\n    }\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  \n  const renderContent = () => {\n    if (loading) {\n      return <Loading />\n    } else if (data && data.length <= 0) {\n      return <Empty />\n    } else if (data && data.length > 0) {\n      return <List>\n        {data.map(item => \n          <Item \n            key={item.name}\n            name={item.name}\n            description={item.description}\n            html_url={item.html_url} \n          />\n        )}\n      </List>\n    }\n    return null;\n  }\n\n  return (\n    <Container>\n      <h4>Mostrando reposit√≥rios de <b>{login}</b></h4>\n      {renderContent()}\n    </Container>\n  )\n}\n\nexport default Repositories;"]},"metadata":{},"sourceType":"module"}